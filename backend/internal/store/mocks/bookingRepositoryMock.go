// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/g0shi4ek/store/internal/store/domain (interfaces: IBookingRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/g0shi4ek/store/internal/store/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIBookingRepository is a mock of IBookingRepository interface.
type MockIBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBookingRepositoryMockRecorder
}

// MockIBookingRepositoryMockRecorder is the mock recorder for MockIBookingRepository.
type MockIBookingRepositoryMockRecorder struct {
	mock *MockIBookingRepository
}

// NewMockIBookingRepository creates a new mock instance.
func NewMockIBookingRepository(ctrl *gomock.Controller) *MockIBookingRepository {
	mock := &MockIBookingRepository{ctrl: ctrl}
	mock.recorder = &MockIBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBookingRepository) EXPECT() *MockIBookingRepositoryMockRecorder {
	return m.recorder
}

// CreateItemBooking mocks base method.
func (m *MockIBookingRepository) CreateItemBooking(arg0 context.Context, arg1 *domain.ItemBooking) (*domain.ItemBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItemBooking", arg0, arg1)
	ret0, _ := ret[0].(*domain.ItemBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItemBooking indicates an expected call of CreateItemBooking.
func (mr *MockIBookingRepositoryMockRecorder) CreateItemBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItemBooking", reflect.TypeOf((*MockIBookingRepository)(nil).CreateItemBooking), arg0, arg1)
}

// CreateRoomBooking mocks base method.
func (m *MockIBookingRepository) CreateRoomBooking(arg0 context.Context, arg1 *domain.RoomBooking) (*domain.RoomBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoomBooking", arg0, arg1)
	ret0, _ := ret[0].(*domain.RoomBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoomBooking indicates an expected call of CreateRoomBooking.
func (mr *MockIBookingRepositoryMockRecorder) CreateRoomBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoomBooking", reflect.TypeOf((*MockIBookingRepository)(nil).CreateRoomBooking), arg0, arg1)
}

// DeleteItemBooking mocks base method.
func (m *MockIBookingRepository) DeleteItemBooking(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemBooking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemBooking indicates an expected call of DeleteItemBooking.
func (mr *MockIBookingRepositoryMockRecorder) DeleteItemBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemBooking", reflect.TypeOf((*MockIBookingRepository)(nil).DeleteItemBooking), arg0, arg1)
}

// DeleteRoomBooking mocks base method.
func (m *MockIBookingRepository) DeleteRoomBooking(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoomBooking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoomBooking indicates an expected call of DeleteRoomBooking.
func (mr *MockIBookingRepositoryMockRecorder) DeleteRoomBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoomBooking", reflect.TypeOf((*MockIBookingRepository)(nil).DeleteRoomBooking), arg0, arg1)
}

// GetAllItemBookings mocks base method.
func (m *MockIBookingRepository) GetAllItemBookings(arg0 context.Context) ([]*domain.ItemBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItemBookings", arg0)
	ret0, _ := ret[0].([]*domain.ItemBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItemBookings indicates an expected call of GetAllItemBookings.
func (mr *MockIBookingRepositoryMockRecorder) GetAllItemBookings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItemBookings", reflect.TypeOf((*MockIBookingRepository)(nil).GetAllItemBookings), arg0)
}

// GetAllRoomBookings mocks base method.
func (m *MockIBookingRepository) GetAllRoomBookings(arg0 context.Context) ([]*domain.RoomBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoomBookings", arg0)
	ret0, _ := ret[0].([]*domain.RoomBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoomBookings indicates an expected call of GetAllRoomBookings.
func (mr *MockIBookingRepositoryMockRecorder) GetAllRoomBookings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoomBookings", reflect.TypeOf((*MockIBookingRepository)(nil).GetAllRoomBookings), arg0)
}

// GetItemBookingById mocks base method.
func (m *MockIBookingRepository) GetItemBookingById(arg0 context.Context, arg1 int) (*domain.ItemBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemBookingById", arg0, arg1)
	ret0, _ := ret[0].(*domain.ItemBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemBookingById indicates an expected call of GetItemBookingById.
func (mr *MockIBookingRepositoryMockRecorder) GetItemBookingById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemBookingById", reflect.TypeOf((*MockIBookingRepository)(nil).GetItemBookingById), arg0, arg1)
}

// GetRoomBookingById mocks base method.
func (m *MockIBookingRepository) GetRoomBookingById(arg0 context.Context, arg1 int) (*domain.RoomBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomBookingById", arg0, arg1)
	ret0, _ := ret[0].(*domain.RoomBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomBookingById indicates an expected call of GetRoomBookingById.
func (mr *MockIBookingRepositoryMockRecorder) GetRoomBookingById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomBookingById", reflect.TypeOf((*MockIBookingRepository)(nil).GetRoomBookingById), arg0, arg1)
}

// UpdateItemBooking mocks base method.
func (m *MockIBookingRepository) UpdateItemBooking(arg0 context.Context, arg1 *domain.ItemBooking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemBooking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemBooking indicates an expected call of UpdateItemBooking.
func (mr *MockIBookingRepositoryMockRecorder) UpdateItemBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemBooking", reflect.TypeOf((*MockIBookingRepository)(nil).UpdateItemBooking), arg0, arg1)
}

// UpdateRoomBooking mocks base method.
func (m *MockIBookingRepository) UpdateRoomBooking(arg0 context.Context, arg1 *domain.RoomBooking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomBooking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomBooking indicates an expected call of UpdateRoomBooking.
func (mr *MockIBookingRepositoryMockRecorder) UpdateRoomBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomBooking", reflect.TypeOf((*MockIBookingRepository)(nil).UpdateRoomBooking), arg0, arg1)
}
