// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/g0shi4ek/store/internal/store/domain (interfaces: IRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/g0shi4ek/store/internal/store/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Booking mocks base method.
func (m *MockIRepository) Booking() domain.IBookingRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Booking")
	ret0, _ := ret[0].(domain.IBookingRepository)
	return ret0
}

// Booking indicates an expected call of Booking.
func (mr *MockIRepositoryMockRecorder) Booking() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Booking", reflect.TypeOf((*MockIRepository)(nil).Booking))
}

// Item mocks base method.
func (m *MockIRepository) Item() domain.IItemRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Item")
	ret0, _ := ret[0].(domain.IItemRepository)
	return ret0
}

// Item indicates an expected call of Item.
func (mr *MockIRepositoryMockRecorder) Item() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Item", reflect.TypeOf((*MockIRepository)(nil).Item))
}

// Store mocks base method.
func (m *MockIRepository) Store() domain.IStoreRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store")
	ret0, _ := ret[0].(domain.IStoreRepository)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockIRepositoryMockRecorder) Store() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockIRepository)(nil).Store))
}

// User mocks base method.
func (m *MockIRepository) User() domain.IUserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(domain.IUserRepository)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockIRepositoryMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockIRepository)(nil).User))
}
