// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/g0shi4ek/store/internal/store/domain (interfaces: IStoreService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/g0shi4ek/store/internal/store/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIStoreService is a mock of IStoreService interface.
type MockIStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreServiceMockRecorder
}

// MockIStoreServiceMockRecorder is the mock recorder for MockIStoreService.
type MockIStoreServiceMockRecorder struct {
	mock *MockIStoreService
}

// NewMockIStoreService creates a new mock instance.
func NewMockIStoreService(ctrl *gomock.Controller) *MockIStoreService {
	mock := &MockIStoreService{ctrl: ctrl}
	mock.recorder = &MockIStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStoreService) EXPECT() *MockIStoreServiceMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockIStoreService) AddItem(arg0 context.Context, arg1 *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockIStoreServiceMockRecorder) AddItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockIStoreService)(nil).AddItem), arg0, arg1)
}

// BookItems mocks base method.
func (m *MockIStoreService) BookItems(arg0 context.Context, arg1 *domain.ItemBooking) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookItems", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookItems indicates an expected call of BookItems.
func (mr *MockIStoreServiceMockRecorder) BookItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookItems", reflect.TypeOf((*MockIStoreService)(nil).BookItems), arg0, arg1)
}

// BookRooms mocks base method.
func (m *MockIStoreService) BookRooms(arg0 context.Context, arg1 *domain.RoomBooking) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookRooms", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookRooms indicates an expected call of BookRooms.
func (mr *MockIStoreServiceMockRecorder) BookRooms(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookRooms", reflect.TypeOf((*MockIStoreService)(nil).BookRooms), arg0, arg1)
}

// BuyItemsBooking mocks base method.
func (m *MockIStoreService) BuyItemsBooking(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItemsBooking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItemsBooking indicates an expected call of BuyItemsBooking.
func (mr *MockIStoreServiceMockRecorder) BuyItemsBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItemsBooking", reflect.TypeOf((*MockIStoreService)(nil).BuyItemsBooking), arg0, arg1)
}

// BuyRoomsBooking mocks base method.
func (m *MockIStoreService) BuyRoomsBooking(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyRoomsBooking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyRoomsBooking indicates an expected call of BuyRoomsBooking.
func (mr *MockIStoreServiceMockRecorder) BuyRoomsBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyRoomsBooking", reflect.TypeOf((*MockIStoreService)(nil).BuyRoomsBooking), arg0, arg1)
}

// CancelItemsBooking mocks base method.
func (m *MockIStoreService) CancelItemsBooking(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelItemsBooking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelItemsBooking indicates an expected call of CancelItemsBooking.
func (mr *MockIStoreServiceMockRecorder) CancelItemsBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelItemsBooking", reflect.TypeOf((*MockIStoreService)(nil).CancelItemsBooking), arg0, arg1)
}

// CancelRoomsBooking mocks base method.
func (m *MockIStoreService) CancelRoomsBooking(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRoomsBooking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelRoomsBooking indicates an expected call of CancelRoomsBooking.
func (mr *MockIStoreServiceMockRecorder) CancelRoomsBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRoomsBooking", reflect.TypeOf((*MockIStoreService)(nil).CancelRoomsBooking), arg0, arg1)
}

// LoginUser mocks base method.
func (m *MockIStoreService) LoginUser(arg0 context.Context, arg1, arg2 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockIStoreServiceMockRecorder) LoginUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockIStoreService)(nil).LoginUser), arg0, arg1, arg2)
}

// RegisterUser mocks base method.
func (m *MockIStoreService) RegisterUser(arg0 context.Context, arg1 *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIStoreServiceMockRecorder) RegisterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIStoreService)(nil).RegisterUser), arg0, arg1)
}

// UpdateItem mocks base method.
func (m *MockIStoreService) UpdateItem(arg0 context.Context, arg1 *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockIStoreServiceMockRecorder) UpdateItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockIStoreService)(nil).UpdateItem), arg0, arg1)
}

// ViewAllItemBookings mocks base method.
func (m *MockIStoreService) ViewAllItemBookings(arg0 context.Context) ([]*domain.ItemBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllItemBookings", arg0)
	ret0, _ := ret[0].([]*domain.ItemBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllItemBookings indicates an expected call of ViewAllItemBookings.
func (mr *MockIStoreServiceMockRecorder) ViewAllItemBookings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllItemBookings", reflect.TypeOf((*MockIStoreService)(nil).ViewAllItemBookings), arg0)
}

// ViewAllItems mocks base method.
func (m *MockIStoreService) ViewAllItems(arg0 context.Context) ([]*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllItems", arg0)
	ret0, _ := ret[0].([]*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllItems indicates an expected call of ViewAllItems.
func (mr *MockIStoreServiceMockRecorder) ViewAllItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllItems", reflect.TypeOf((*MockIStoreService)(nil).ViewAllItems), arg0)
}

// ViewAllRoomBookings mocks base method.
func (m *MockIStoreService) ViewAllRoomBookings(arg0 context.Context) ([]*domain.RoomBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllRoomBookings", arg0)
	ret0, _ := ret[0].([]*domain.RoomBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllRoomBookings indicates an expected call of ViewAllRoomBookings.
func (mr *MockIStoreServiceMockRecorder) ViewAllRoomBookings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllRoomBookings", reflect.TypeOf((*MockIStoreService)(nil).ViewAllRoomBookings), arg0)
}

// ViewAllStores mocks base method.
func (m *MockIStoreService) ViewAllStores(arg0 context.Context) ([]*domain.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllStores", arg0)
	ret0, _ := ret[0].([]*domain.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllStores indicates an expected call of ViewAllStores.
func (mr *MockIStoreServiceMockRecorder) ViewAllStores(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllStores", reflect.TypeOf((*MockIStoreService)(nil).ViewAllStores), arg0)
}

// ViewItem mocks base method.
func (m *MockIStoreService) ViewItem(arg0 context.Context, arg1 int) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewItem", arg0, arg1)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewItem indicates an expected call of ViewItem.
func (mr *MockIStoreServiceMockRecorder) ViewItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewItem", reflect.TypeOf((*MockIStoreService)(nil).ViewItem), arg0, arg1)
}

// ViewStore mocks base method.
func (m *MockIStoreService) ViewStore(arg0 context.Context, arg1 int) (*domain.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewStore", arg0, arg1)
	ret0, _ := ret[0].(*domain.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewStore indicates an expected call of ViewStore.
func (mr *MockIStoreServiceMockRecorder) ViewStore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewStore", reflect.TypeOf((*MockIStoreService)(nil).ViewStore), arg0, arg1)
}
