// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/g0shi4ek/store/internal/store/domain (interfaces: IStoreRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/g0shi4ek/store/internal/store/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIStoreRepository is a mock of IStoreRepository interface.
type MockIStoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreRepositoryMockRecorder
}

// MockIStoreRepositoryMockRecorder is the mock recorder for MockIStoreRepository.
type MockIStoreRepositoryMockRecorder struct {
	mock *MockIStoreRepository
}

// NewMockIStoreRepository creates a new mock instance.
func NewMockIStoreRepository(ctrl *gomock.Controller) *MockIStoreRepository {
	mock := &MockIStoreRepository{ctrl: ctrl}
	mock.recorder = &MockIStoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStoreRepository) EXPECT() *MockIStoreRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIStoreRepository) Create(arg0 context.Context, arg1 *domain.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIStoreRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIStoreRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIStoreRepository) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIStoreRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIStoreRepository)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIStoreRepository) GetAll(arg0 context.Context) ([]*domain.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*domain.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIStoreRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIStoreRepository)(nil).GetAll), arg0)
}

// GetById mocks base method.
func (m *MockIStoreRepository) GetById(arg0 context.Context, arg1 int) (*domain.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*domain.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIStoreRepositoryMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIStoreRepository)(nil).GetById), arg0, arg1)
}

// GetByNum mocks base method.
func (m *MockIStoreRepository) GetByNum(arg0 context.Context, arg1 int) (*domain.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNum", arg0, arg1)
	ret0, _ := ret[0].(*domain.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNum indicates an expected call of GetByNum.
func (mr *MockIStoreRepositoryMockRecorder) GetByNum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNum", reflect.TypeOf((*MockIStoreRepository)(nil).GetByNum), arg0, arg1)
}

// Update mocks base method.
func (m *MockIStoreRepository) Update(arg0 context.Context, arg1 *domain.Store) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIStoreRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIStoreRepository)(nil).Update), arg0, arg1)
}
