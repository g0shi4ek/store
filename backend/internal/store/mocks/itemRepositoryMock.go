// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/g0shi4ek/store/internal/store/domain (interfaces: IItemRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/g0shi4ek/store/internal/store/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIItemRepository is a mock of IItemRepository interface.
type MockIItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIItemRepositoryMockRecorder
}

// MockIItemRepositoryMockRecorder is the mock recorder for MockIItemRepository.
type MockIItemRepositoryMockRecorder struct {
	mock *MockIItemRepository
}

// NewMockIItemRepository creates a new mock instance.
func NewMockIItemRepository(ctrl *gomock.Controller) *MockIItemRepository {
	mock := &MockIItemRepository{ctrl: ctrl}
	mock.recorder = &MockIItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIItemRepository) EXPECT() *MockIItemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIItemRepository) Create(arg0 context.Context, arg1 *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIItemRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIItemRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIItemRepository) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIItemRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIItemRepository)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIItemRepository) GetAll(arg0 context.Context) ([]*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIItemRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIItemRepository)(nil).GetAll), arg0)
}

// GetById mocks base method.
func (m *MockIItemRepository) GetById(arg0 context.Context, arg1 int) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIItemRepositoryMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIItemRepository)(nil).GetById), arg0, arg1)
}

// GetByName mocks base method.
func (m *MockIItemRepository) GetByName(arg0 context.Context, arg1 string) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIItemRepositoryMockRecorder) GetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIItemRepository)(nil).GetByName), arg0, arg1)
}

// Update mocks base method.
func (m *MockIItemRepository) Update(arg0 context.Context, arg1 *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIItemRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIItemRepository)(nil).Update), arg0, arg1)
}
