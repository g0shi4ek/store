create table if not exists stores (
	id int primary key generated by default as identity,
	number int not null,
	room_total int not null,
	room_booked int default 0,
	room_occupied int default 0
);

create table if not exists items (
	id int primary key generated by default as identity,
	name varchar not null, 
	amount int default 0,
	provider varchar not null, 
	price int not null check(price>0)
);

create table if not exists room_bookings (
	id integer primary key generated by default as identity,
	amount int not null check(amount>0),
	store_id int references stores(id) not null,
	item_id int references items(id) not null,
	is_active bool default false
);

create table if not exists item_bookings (
	id integer primary key generated by default as identity,
	amount int not null check(amount>0),
	item_id int references items(id) not null,
	is_active bool default false
);

create or replace function room_counts_on_insert()
returns trigger as $$
declare 
    available int;
begin
    -- Вычисляем доступное количество комнат
    select room_total - room_occupied - room_booked
    into available
    from stores
    where number = NEW.store_id;
    
    if NEW.amount <= available then
        -- Обновляем перед вставкой
        update stores
        set room_booked = room_booked + NEW.amount
        where number = NEW.store_id;
        return NEW;
    else 
        raise exception 'Not enough rooms available. Requested: %, Available: %', 
            NEW.amount, available;
    end if;
end;
$$ language plpgsql;

create trigger tr_room_bookings_insert
before insert on room_bookings
for each row
execute function room_counts_on_insert();

-- update в room_bookings (закупка товара)
create or replace function room_counts_on_update()
returns trigger as $$
begin  
    if not old.is_active and new.is_active then
        update stores 
        set 
		room_booked = room_booked - new.amount, 
		room_occupied = room_occupied + new.amount
        where number = new.store_id;
    end if;    
    return new;
end;
$$ language plpgsql;

create trigger tr_room_bookings_update
after update on room_bookings
for each row
execute function room_counts_on_update();

-- delete в room_bookings (отмена брони)
create or replace function room_counts_on_delete()
returns trigger as $$
begin  
	-- Если бронь была активна (то есть товары уже лежали), уменьшаем занятые
    if old.is_active then
        update stores 
        set room_occupied = room_occupied - old.amount 
        where number = old.store_id;
	else 
		update stores 
    	set room_booked = room_booked - old.amount 
    	where number = old.store_id; 
    end if;
    return old;
end;
$$ language plpgsql;

create trigger tr_room_bookings_delete
after delete on room_bookings
for each row
execute function room_counts_on_delete();


create or replace function item_counts_on_insert()
returns trigger as $$
declare 
    available int;
begin
    select amount
    into available
    from items
    where id = NEW.item_id;
    
    if NEW.amount <= available then
        update items
        set amount = amount - NEW.amount
        where id = NEW.item_id;
        return NEW;
    else 
        raise exception 'Not enough items available. Requested: %, Available: %', 
            NEW.amount, available;
    end if;
end;
$$ language plpgsql;

create trigger tr_item_bookings_insert
before insert on item_bookings
for each row
execute function item_counts_on_insert();

create or replace function item_counts_on_delete()
returns trigger as $$
begin  
    -- Если бронь была активна (товар закуплен)
    if old.is_active then
        null;
    else
        update items 
        set amount = amount + old.amount
        where id = old.item_id;
    end if;
    
    return old;
end;
$$ language plpgsql;

create trigger tr_item_bookings_delete
after delete on item_bookings
for each row
execute function item_counts_on_delete();

insert into stores (number, room_total) values (1, 10);
insert into items (name, amount, provider, price) values ('book_1', 15, 'mmm', 1000), ('book_2', 10, 'mmm', 2000), ('book_3', 5, 'mmm', 1500);
